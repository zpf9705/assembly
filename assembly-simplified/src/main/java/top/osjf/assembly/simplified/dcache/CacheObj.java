package top.osjf.assembly.simplified.dcache;

import org.springframework.context.ApplicationContext;
import top.osjf.assembly.simplified.dcache.sql.CacheDruidFilterEvent;

import java.io.Serializable;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

/**
 * Cache information definition interface, including cache
 * metadata reference information and buffering methods.
 *
 * @author <a href="mailto:929160069@qq.com">zhangpengfei</a>
 * @since 2.2.4
 */
public interface CacheObj extends Serializable {

    /**
     * The important prefix value of the cache flag key should be
     * used as a query comparison for similar keys during the later
     * cache refresh period.
     * <p>For example, in {@link CacheDruidFilterEvent}, this value
     * should be written as the specific name of the database table as
     * a reference for subsequent interception and recovery.
     * <p>Used as a reference for cache values after formatting method
     * {@link #getCacheKey()} with parameter {@link #getMakeCacheParams()}.
     *
     * @return Fill in the values according to the scene.
     */
    String getValue();

    /**
     * Cache the original parameters generated for the first time
     * and keep them for use in the next cache refresh.
     * <p>And use {@link #getValue()} as a reference for formatting
     * cache keys in method {@link #getCacheKey()}.
     *
     * @return Generate a cached parameter array.
     */
    Object[] getMakeCacheParams();

    /**
     * The default method for obtaining the cache key is to use
     * the return values of methods {@link #getValue()} and
     * {@link #getMakeCacheParams()} as the cache key in the
     * format {@code value + '@' + hashcode(params)}.
     *
     * @return Formatted cache key.
     */
    default String getCacheKey() {
        return getValue() + "@" + Arrays.hashCode(getMakeCacheParams());
    }

    /**
     * Set the interval time required for caching, and use
     * {@link #getCacheTimeUnit()} to determine the specific
     * time period.
     *
     * @param cacheDuration the interval time required for caching.
     */
    void setCacheDuration(long cacheDuration);

    /**
     * Return the interval time required for caching.
     *
     * @return the interval time required for caching.
     */
    long getCacheDuration();

    /**
     * Set the interval time unit required for caching, and use
     * {@link #getCacheDuration()} to determine the specific
     * time period.
     *
     * @param cacheTimeUnit the interval time unit required for caching.
     */
    void setCacheTimeUnit(TimeUnit cacheTimeUnit);

    /**
     * Return the interval time unit required for caching.
     *
     * @return the interval time unit required for caching.
     */
    TimeUnit getCacheTimeUnit();

    /**
     * Set the cache content for this time.
     *
     * @param cacheContent the cache content for this time.
     */
    void setCacheContent(Object cacheContent);

    /**
     * Return cached content, which can be converted to the
     * corresponding type of content, but attention should
     * be paid to conversion issues.
     *
     * @param <T> Types that require strong conversion,
     *            pay attention to {@link ClassCastException}.
     * @return Fill in the values according to the scene.
     */
    <T> T getCacheContent();

    /**
     * Because the retrieval of this cache content usually relies
     * on the invocation of beans in the Spring framework, this
     * setting value is the name of the bean in the Spring framework.
     * <p>This setting is used to directly retrieve the bean from the
     * container and call the cache method {@link #setReCacheMethod(String)}
     * when the cache is refreshed in the future.
     *
     * @param reCacheProxyObjName The name of the cache refresh bean.
     */
    void setReCacheProxyObjName(String reCacheProxyObjName);

    /**
     * Set the method name generated by the cache to be used when
     * refreshing the cache for the second time, and use the above
     * {@link #setReCacheProxyObjName(String)} to make reflection
     * calls in subsequent methods.
     *
     * @param reCacheMethod The name of the cache refresh method.
     */
    void setReCacheMethod(String reCacheMethod);

    /**
     * The cache refresh operation method involves setting the
     * container bean name and corresponding method name for cache
     * refresh. Here, the context object of Spring is passed in,
     * and after obtaining the bean, the corresponding method is
     * called using reflection. This process ensures that the cache
     * refresh still goes through Spring's proxy, consistent with
     * the process of the first cache.
     *
     * @param context The context container for spring.
     */
    void reCache(ApplicationContext context);

    /**
     * Calculate the hash code for the overall attribute value of {@link CacheObj}.
     *
     * @return the hash code for the overall attribute.
     */
    @Override
    int hashCode();

    /**
     * Compare whether two {@link CacheObj} are equal.
     *
     * @return if {@code true} equals, {@code false} otherwise.
     */
    @Override
    boolean equals(Object obj);

    /**
     * Same as to {@link #getCacheKey()}
     *
     * @return Formatted cache key.
     */
    @Override
    String toString();
}
