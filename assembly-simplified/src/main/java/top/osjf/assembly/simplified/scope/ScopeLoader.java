package top.osjf.assembly.simplified.scope;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

import static org.springframework.web.context.WebApplicationContext.SCOPE_REQUEST;
import static org.springframework.web.context.WebApplicationContext.SCOPE_SESSION;
import static org.springframework.web.context.WebApplicationContext.SCOPE_APPLICATION;

/**
 * The loading interface for unNormal scope container beans in the Spring
 * framework (normal scope includes singleton and multi instance), and the
 * special scope includes the request domain{@code SCOPE_REQUEST},application
 * domain{@code SCOPE_APPLICATION}, session domain{@code SCOPE_SESSION},
 * etc. defined by the Spring framework.
 *
 * <p>This interface supports the loading and creation of special scope beans.
 * For specific differentiation, you can refer to the extension interface of the
 * subclass. It is generally recommended to use the extension interface directly,
 * or you can use the extension method {@link #type()} directly to distinguish scopes.
 *
 * @author <a href="mailto:929160069@qq.com">zhangpengfei</a>
 * @see RequestScopeLoader
 * @see SessionScopeLoader
 * @see ApplicationScopeLoader
 * @since 2.1.6
 */
public interface ScopeLoader extends InitializingBean, DisposableBean {

    /**
     * The loading method at the time of triggering a special scope can
     * be called to create a bean for this special scope.
     *
     * <p>At the end of the call, the {@link #destroy()} callback is
     * automatically called to destroy it.
     */
    default void load() {
    }

    /**
     * Specify the special scope of the current bean in the form of an
     * enumeration {@link SupportScopeType}.
     *
     * @return the special scope of the current bean in the form of an
     * enumeration {@link SupportScopeType}.
     */
    SupportScopeType type();

    /**
     * After using a special scope to create a bean and completing attribute assignments,
     * certain necessary initialization logic can be performed.
     *
     * @throws Exception The exception generated by special initialization logic is
     *                   generally {@link org.springframework.beans.BeansException}.
     */
    @Override
    default void afterPropertiesSet() throws Exception {
    }

    /**
     * The destruction callback after the use of a special scope can be
     * used to perform certain end logic.
     *
     * @throws Exception Exception generated by bean destruction logic.
     */
    @Override
    default void destroy() throws Exception {
    }

    /**
     * @see org.springframework.web.context.WebApplicationContext
     */
    enum SupportScopeType {
        REQUEST(SCOPE_REQUEST),
        SESSION(SCOPE_SESSION),
        APPLICATION(SCOPE_APPLICATION);
        final String scope;

        SupportScopeType(String scope) {
            this.scope = scope;
        }
    }
}
