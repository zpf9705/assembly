/*
 * Copyright 2024-? the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package top.osjf.cron.core.repository;

import top.osjf.cron.core.CronTask;
import top.osjf.cron.core.exception.CronInternalException;
import top.osjf.cron.core.lang.NotNull;
import top.osjf.cron.core.listener.CronListener;

/**
 * @author <a href="mailto:929160069@qq.com">zhangpengfei</a>
 * @since 1.0.0
 */
@SuppressWarnings("rawtypes")
public interface CronTaskRepository<ID, BODY, L extends CronListener> {

    /**
     * @param expression a valid cron expression.
     * @param body       the runtime required for the registration task.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    @NotNull
    ID register(@NotNull String expression, @NotNull BODY body) throws CronInternalException;

    /**
     * @param task a task metadata encapsulation object {@code CronTask}.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input {@link CronTask#getExpression()} is invalid.
     * @throws NullPointerException     if input {@code CronTask} or body is {@literal null}.
     */
    @NotNull
    ID register(@NotNull CronTask task) throws CronInternalException;

    /**
     * @param id            the Unique ID of the registered task.
     * @param newExpression a valid new cron expression.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for updating are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input newExpression is invalid.
     * @throws NullPointerException     if input id or newExpression is {@literal null}.
     */
    void update(@NotNull ID id, @NotNull String newExpression) throws CronInternalException;

    /**
     * @param id the Unique ID of the registered task.
     * @throws CronInternalException the internal exceptions generated by the
     *                               framework used for removing are detailed
     *                               in {@link CronInternalException#getCause()}.
     * @throws NullPointerException  if input id is {@literal null}.
     */
    void remove(@NotNull ID id) throws CronInternalException;

    /**
     * @param listener l
     * @throws NullPointerException if input listener is {@literal null}.
     */
    void addListener(@NotNull L listener);

    /**
     * @param listener l
     * @throws NullPointerException if input listener is {@literal null}.
     */
    void removeListener(@NotNull L listener);
}
