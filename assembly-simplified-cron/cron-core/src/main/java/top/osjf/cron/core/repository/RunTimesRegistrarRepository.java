/*
 * Copyright 2025-? the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package top.osjf.cron.core.repository;

import top.osjf.cron.core.exception.CronInternalException;
import top.osjf.cron.core.exception.UnsupportedTaskBodyException;
import top.osjf.cron.core.lang.NotNull;
import top.osjf.cron.core.listener.CronListener;

/**
 * {@code RunTimesRegistrarRepository} is a task scheduling registration interface that
 * controls the number of times an expression is executed after specifying it.
 *
 * <p>Its registration mechanism relies on {@link GeneralRegistrarRepository}, which adds
 * a limit on the number of times each task can run and automatically interrupts when the
 * limit is reached. The API provides a wide range of options, including one-time and
 * specified run limits. This interface is designed to provide developers with registration
 * for temporary scheduling tasks.
 *
 * <p>It should be mentioned that the interrupt method after reaching its maximum number
 * of runs is to delete tasks (registration is required during use, and tasks are not executed
 * after interruption). The implementation mechanism depends on a check count {@link CronListener}
 * and will continue to work at the bottom layer, providing relevant support for the following APIs.
 *
 * @author <a href="mailto:929160069@qq.com">zhangpengfei</a>
 * @since 3.0.2
 * @see RunTimes
 */
public interface RunTimesRegistrarRepository
        extends Repository, GeneralRegistrarRepository, ModifiableRepository, CronListenerRepository {

    /**
     * Register a new scheduled task using the given cron expression and a {@code Runnable},
     * and it will be automatically cleared after running once.
     * <p>This method receives a valid cron expression and a {@code Runnable} as input
     * parameters,and return the unique identifier of the task after successful registration.
     * @param expression a valid cron expression.
     * @param runnable   the {@code Runnable} executed when cron expression expects time.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull Runnable runnable) throws CronInternalException {
        registerRunTimes(expression, runnable, 1);
    }

    /**
     * Register a new scheduled task using the given cron expression and a {@code CronMethodRunnable},
     * and it will be automatically cleared after running once.
     * <p>This method receives a valid cron expression and a {@code CronMethodRunnable}
     * as input parameters,and return the unique identifier of the task after successful
     * registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code CronMethodRunnable} executed when cron expression expects time.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull CronMethodRunnable runnable)
            throws CronInternalException {
        registerRunTimes(expression, runnable, 1);
    }

    /**
     * Register a new scheduled task using the given cron expression and a {@code RunnableTaskBody},
     * and it will be automatically cleared after running once.
     * <p>This method receives a valid cron expression and a {@code RunnableTaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code RunnableTaskBody} executed when cron expression expects time.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull RunnableTaskBody body)
            throws CronInternalException {
        registerRunTimes(expression, body, 1);
    }

    /**
     * Register a new scheduled task using the given cron expression and a {@code TaskBody},
     * and it will be automatically cleared after running once.
     * <p>This method receives a valid cron expression and a {@code TaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     * <p>The execution parameter {@code TaskBody} is a custom parameter, which is determined
     * based on the framework implementation used. Developers can create and pass custom
     * parameters based on this.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code TaskBody} executed when cron expression expects time.
     * @throws CronInternalException        the internal exceptions generated by the
     *                                      framework used for registration are detailed
     *                                      in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException     if input expression is invalid.
     * @throws NullPointerException         if input expression or body is {@literal null}.
     * @throws UnsupportedTaskBodyException if input {@code TaskBody} is not supported.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull TaskBody body) throws CronInternalException,
            UnsupportedTaskBodyException {
        registerRunTimes(expression, body, 1);
    }

    /**
     * Register a new scheduled task using the given {@code CronTask} object,
     * and it will be automatically cleared after running once.
     * <p>The {@code CronTask} object encapsulates the cron expression and task body
     * information of the task.
     * <p>This method takes a {@code CronTask} object as an input parameter and returns
     * the unique identifier of the task after successful registration.
     * @param task a task metadata encapsulation object {@code CronTask}.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input {@link CronTask#getExpression()} is invalid.
     * @throws NullPointerException     if input {@code CronTask} or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull CronTask task) throws CronInternalException {
        registerRunTimes(task, 1);
    }

    /**
     * Register a new scheduled task using the given cron expression and {@code Runnable},
     * and automatically clear it after running the specified number of times
     * <p>This method receives a valid cron expression and a {@code Runnable} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code Runnable} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException  if input expression is invalid or input times
     *                                   not be greater than 0.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    void registerRunTimes(@NotNull String expression, @NotNull Runnable runnable, int times)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code CronMethodRunnable},
     * and automatically clear it after running the specified number of times.
     * <p>This method receives a valid cron expression and a {@code CronMethodRunnable}
     * as input parameters,and return the unique identifier of the task after successful
     * registration.
     * @param expression a valid cron expression.
     * @param runnable   the {@code CronMethodRunnable} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException  if input expression is invalid or input times
     *                                   not be greater than 0.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    void registerRunTimes(@NotNull String expression, @NotNull CronMethodRunnable runnable, int times)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code RunnableTaskBody},
     * and automatically clear it after running the specified number of times.
     * <p>This method receives a valid cron expression and a {@code RunnableTaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     * @param expression a valid cron expression.
     * @param body       the {@code RunnableTaskBody} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException  if input expression is invalid or input times
     *                                   not be greater than 0.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    void registerRunTimes(@NotNull String expression, @NotNull RunnableTaskBody body, int times)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code TaskBody},
     * and automatically clear it after running the specified number of times.
     * <p>This method receives a valid cron expression and a {@code TaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     * <p>The execution parameter {@code TaskBody} is a custom parameter, which is determined
     * based on the framework implementation used. Developers can create and pass custom
     * parameters based on this.
     * @param expression a valid cron expression.
     * @param body       the {@code TaskBody} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @throws CronInternalException        the internal exceptions generated by the
     *                                      framework used for registration are detailed
     *                                      in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException  if input expression is invalid or input times
     *                                   not be greater than 0.
     * @throws NullPointerException         if input expression or body is {@literal null}.
     * @throws UnsupportedTaskBodyException if input {@code TaskBody} is not supported.
     */
    void registerRunTimes(@NotNull String expression, @NotNull TaskBody body, int times) throws CronInternalException,
            UnsupportedTaskBodyException;

    /**
     * Register a new scheduled task using the given {@code CronTask} object,
     * and automatically clear it after running the specified number of times.
     * <p>The {@code CronTask} object encapsulates the cron expression and task body
     * information of the task.
     * <p>This method takes a {@code CronTask} object as an input parameter and returns
     * the unique identifier of the task after successful registration.
     * @param task  a task metadata encapsulation object {@code CronTask}.
     * @param times the number of runs specified based on the expression's runtime.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input {@link CronTask#getExpression()}
     *                                  is invalid or input times not be greater than 0.
     * @throws NullPointerException     if input {@code CronTask} or body is {@literal null}.
     */
    void registerRunTimes(@NotNull CronTask task, int times) throws CronInternalException;
}
