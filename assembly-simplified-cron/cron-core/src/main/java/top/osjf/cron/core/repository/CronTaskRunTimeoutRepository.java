/*
 * Copyright 2025-? the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package top.osjf.cron.core.repository;

import top.osjf.cron.core.exception.CronInternalException;
import top.osjf.cron.core.exception.UnsupportedTaskBodyException;
import top.osjf.cron.core.lang.NotNull;

/**
 * Timing task execution timeout control repository interface, extends from {@link CronTaskRunTimesRepository}.
 *
 * <p>This interface extends the basic timing task functionality by adding timeout control configuration
 * during task execution, suitable for scenarios that require strict limits on task execution time.
 *
 * <p>Provides multiple registration methods supporting different types of task bodies ({@link Runnable},
 * {@link CronMethodRunnable}, {@link RunnableTaskBody}, {@link TaskBody}) combined with timeout configuration,
 * including variants for single-run and multiple-run scenarios.
 *
 * @author <a href="mailto:929160069@qq.com">zhangpengfei</a>
 * @since 3.0.2
 */
public interface CronTaskRunTimeoutRepository extends CronTaskRunTimesRepository, Repository {

    /**
     * Register a new scheduled task using the given cron expression and a {@code Runnable}
     * and an instance of timeout control configuration during task execution.
     *
     *
     * <p>This method receives a valid cron expression and a {@code Runnable} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code Runnable} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    String register(@NotNull String expression, @NotNull Runnable runnable, @NotNull RunningTimeout timeout)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code CronMethodRunnable}
     * and an instance of timeout control configuration during task execution.
     *
     * <p>This method receives a valid cron expression and a {@code CronMethodRunnable}
     * as input parameters,and return the unique identifier of the task after successful
     * registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code CronMethodRunnable} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    String register(@NotNull String expression, @NotNull CronMethodRunnable runnable, @NotNull RunningTimeout timeout)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code RunnableTaskBody}
     * and an instance of timeout control configuration during task execution.
     *
     * <p>This method receives a valid cron expression and a {@code RunnableTaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code RunnableTaskBody} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    String register(@NotNull String expression, @NotNull RunnableTaskBody body, @NotNull RunningTimeout timeout)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code TaskBody}.
     * and an instance of timeout control configuration during task execution.
     *
     * <p>This method receives a valid cron expression and a {@code TaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * <p>The execution parameter {@code TaskBody} is a custom parameter, which is determined
     * based on the framework implementation used. Developers can create and pass custom
     * parameters based on this.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code TaskBody} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException        the internal exceptions generated by the
     *                                      framework used for registration are detailed
     *                                      in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException     if input expression is invalid.
     * @throws NullPointerException         if input expression or body is {@literal null}.
     * @throws UnsupportedTaskBodyException if input {@code TaskBody} is not supported.
     */
    String register(@NotNull String expression, @NotNull TaskBody body, @NotNull RunningTimeout timeout)
            throws CronInternalException, UnsupportedTaskBodyException;

    /**
     * Register a new scheduled task using the given {@code CronTask} object
     * and an instance of timeout control configuration during task execution.
     * <p>The {@code CronTask} object encapsulates the cron expression and task body
     * information of the task.
     *
     * <p>This method takes a {@code CronTask} object as an input parameter and returns
     * the unique identifier of the task after successful registration.
     *
     * @param task    a task metadata encapsulation object {@code CronTask}.
     * @param timeout configure instance for timeout control during task execution.
     * @return After successful registration, return the unique ID of the registration task,
     * which can be used for subsequent updates and deletions.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input {@link CronTask#getExpression()} is invalid.
     * @throws NullPointerException     if input {@code CronTask} or body is {@literal null}.
     */
    String register(@NotNull CronTask task, @NotNull RunningTimeout timeout) throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code Runnable}
     * and an instance of timeout control configuration during task execution,and it will
     * be automatically cleared after running once
     *
     * <p>This method receives a valid cron expression and a {@code Runnable} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull Runnable runnable,
                                 @NotNull RunningTimeout timeout) throws CronInternalException {
        registerRunTimes(expression, runnable, 1, timeout);
    }

    /**
     * Register a new scheduled task using the given cron expression and a {@code CronMethodRunnable}
     * and an instance of timeout control configuration during task execution, and it will be
     * automatically cleared after running once.
     *
     * <p>This method receives a valid cron expression and a {@code CronMethodRunnable}
     * as input parameters,and return the unique identifier of the task after successful
     * registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code CronMethodRunnable} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull CronMethodRunnable runnable,
                                 @NotNull RunningTimeout timeout) throws CronInternalException {
        registerRunTimes(expression, runnable, 1, timeout);
    }

    /**
     * Register a new scheduled task using the given cron expression and a {@code RunnableTaskBody}
     * and an instance of timeout control configuration during task execution, and it will be
     * automatically cleared after running once.
     *
     * <p>This method receives a valid cron expression and a {@code RunnableTaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code RunnableTaskBody} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull RunnableTaskBody body,
                                 @NotNull RunningTimeout timeout) throws CronInternalException {
        registerRunTimes(expression, body, 1, timeout);
    }

    /**
     * Register a new scheduled task using the given cron expression and a {@code TaskBody}
     * and an instance of timeout control configuration during task execution, and it will
     * be automatically cleared after running once.
     *
     * <p>This method receives a valid cron expression and a {@code TaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * <p>The execution parameter {@code TaskBody} is a custom parameter, which is determined
     * based on the framework implementation used. Developers can create and pass custom
     * parameters based on this.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code TaskBody} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException        the internal exceptions generated by the
     *                                      framework used for registration are detailed
     *                                      in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException     if input expression is invalid.
     * @throws NullPointerException         if input expression or body is {@literal null}.
     * @throws UnsupportedTaskBodyException if input {@code TaskBody} is not supported.
     */
    default void registerRunOnce(@NotNull String expression, @NotNull TaskBody body, @NotNull RunningTimeout timeout)
            throws CronInternalException, UnsupportedTaskBodyException {
        registerRunTimes(expression, body, 1, timeout);
    }

    /**
     * Register a new scheduled task using the given {@code CronTask} object and an instance of
     * timeout control configuration during task execution, and it will be automatically cleared
     * after running once.
     *
     * <p>The {@code CronTask} object encapsulates the cron expression and task body
     * information of the task.
     *
     * <p>This method takes a {@code CronTask} object as an input parameter and returns
     * the unique identifier of the task after successful registration.
     *
     * @param task    a task metadata encapsulation object {@code CronTask}.
     * @param timeout configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input {@link CronTask#getExpression()} is invalid.
     * @throws NullPointerException     if input {@code CronTask} or body is {@literal null}.
     */
    default void registerRunOnce(@NotNull CronTask task, @NotNull RunningTimeout timeout) throws CronInternalException {
        registerRunTimes(task, 1, timeout);
    }

    /**
     * Register a new scheduled task using the given cron expression and {@code Runnable}
     * and an instance of timeout control configuration during task execution,and automatically
     * clear it after running the specified number of times.
     *
     * <p>This method receives a valid cron expression and a {@code Runnable} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code Runnable} executed when cron expression expects time.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws IllegalArgumentException if input times not be greater than 0.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    void registerRunTimes(@NotNull String expression, @NotNull Runnable runnable, int times,
                          @NotNull RunningTimeout timeout)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code CronMethodRunnable}
     * and an instance of timeout control configuration during task execution, and automatically clear
     * it after running the specified number of times.
     *
     * <p>This method receives a valid cron expression and a {@code CronMethodRunnable}
     * as input parameters,and return the unique identifier of the task after successful
     * registration.
     *
     * @param expression a valid cron expression.
     * @param runnable   the {@code CronMethodRunnable} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws IllegalArgumentException if input times not be greater than 0.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    void registerRunTimes(@NotNull String expression, @NotNull CronMethodRunnable runnable, int times,
                          @NotNull RunningTimeout timeout)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code RunnableTaskBody},
     * and an instance of timeout control configuration during task execution and automatically
     * clear it after running the specified number of times.
     *
     * <p>This method receives a valid cron expression and a {@code RunnableTaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code RunnableTaskBody} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input expression is invalid.
     * @throws IllegalArgumentException if input times not be greater than 0.
     * @throws NullPointerException     if input expression or body is {@literal null}.
     */
    void registerRunTimes(@NotNull String expression, @NotNull RunnableTaskBody body, int times,
                          @NotNull RunningTimeout timeout)
            throws CronInternalException;

    /**
     * Register a new scheduled task using the given cron expression and a {@code TaskBody}
     * and an instance of timeout control configuration during task execution and automatically
     * clear it after running the specified number of times.
     *
     * <p>This method receives a valid cron expression and a {@code TaskBody} as input
     * parameters,and return the unique identifier of the task after successful registration.
     *
     * <p>The execution parameter {@code TaskBody} is a custom parameter, which is determined
     * based on the framework implementation used. Developers can create and pass custom
     * parameters based on this.
     *
     * @param expression a valid cron expression.
     * @param body       the {@code TaskBody} executed when cron expression expects time.
     * @param times      the number of runs specified based on the expression's runtime.
     * @param timeout    configure instance for timeout control during task execution.
     * @throws CronInternalException        the internal exceptions generated by the
     *                                      framework used for registration are detailed
     *                                      in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException     if input expression is invalid.
     * @throws IllegalArgumentException     if input times not be greater than 0.
     * @throws NullPointerException         if input expression or body is {@literal null}.
     * @throws UnsupportedTaskBodyException if input {@code TaskBody} is not supported.
     */
    void registerRunTimes(@NotNull String expression, @NotNull TaskBody body, int times,
                          @NotNull RunningTimeout timeout) throws CronInternalException, UnsupportedTaskBodyException;

    /**
     * Register a new scheduled task using the given {@code CronTask} object
     * and an instance of timeout control configuration during task execution,
     * and automatically clear it after running the specified number of times.
     *
     * <p>The {@code CronTask} object encapsulates the cron expression and task body
     * information of the task.
     *
     * <p>This method takes a {@code CronTask} object as an input parameter and returns
     * the unique identifier of the task after successful registration.
     *
     * @param task    a task metadata encapsulation object {@code CronTask}.
     * @param times   the number of runs specified based on the expression's runtime.
     * @param timeout configure instance for timeout control during task execution.
     * @throws CronInternalException    the internal exceptions generated by the
     *                                  framework used for registration are detailed
     *                                  in {@link CronInternalException#getCause()}.
     * @throws IllegalArgumentException if input {@link CronTask#getExpression()} is invalid.
     * @throws IllegalArgumentException if input times not be greater than 0.
     * @throws NullPointerException     if input {@code CronTask} or body is {@literal null}.
     */
    void registerRunTimes(@NotNull CronTask task, int times, @NotNull RunningTimeout timeout)
            throws CronInternalException;
}
