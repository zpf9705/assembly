/*
 * Copyright 2025-? the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package top.osjf.cron.quartz.repository;

import org.quartz.JobKey;
import top.osjf.cron.core.lang.NotNull;
import top.osjf.cron.core.repository.CronMethodRunnable;

import java.lang.reflect.Method;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Generate a wrapper class for {@link JobKey} based on the original {@link Runnable},
 * which is essentially for the generation of {@link JobKey} in the quartz framework
 * task. It can be used as a candidate {@link CronMethodRunnable} or any arbitrary
 * {@link Runnable} as the original runtime.
 *
 * @author <a href="mailto:929160069@qq.com">zhangpengfei</a>
 * @since 3.0.2
 */
public class JobKeyWrapperdRunnable implements Runnable {

    /** The default generator with incremental data as the task name.*/
    private static final AtomicLong DEFAULT_NAME_COUNTER = new AtomicLong(0);

    /** Unique {@link JobKey} generated based on the input {@link Runnable} or default mechanism.*/
    @NotNull private final JobKey jobKey;

    /** The original {@link Runnable}.*/
    @NotNull private final Runnable raw;

    /**
     * Constructs a {@link JobKeyWrapperdRunnable} with given raw {@link Runnable}.
     * @param raw the original {@link Runnable}.
     */
    public JobKeyWrapperdRunnable(@NotNull Runnable raw) {
        this.raw = raw;
        if (raw instanceof CronMethodRunnable) {
            CronMethodRunnable cr = (CronMethodRunnable) raw;
            Method method = cr.getMethod();
            this.jobKey = new JobKey(method.getName(), method.getDeclaringClass().getName());
        }
        else {
            this.jobKey = new JobKey(String.valueOf(DEFAULT_NAME_COUNTER.incrementAndGet()),
                    JobConstants.DEFAULT_GROUP);
        }
    }

    /**
     * @return The unique {@link JobKey} generated by {@link #raw}.
     */
    @NotNull
    public JobKey getJobKey() {
        return jobKey;
    }

    /**
     * @return The original {@link Runnable}.
     */
    @NotNull
    public Runnable getRaw() {
        return raw;
    }

    @Override
    public void run() {
        raw.run();
    }
}
